{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Techtonic-22 Docker After going through this workshop you should understand: What a container and image is The differences between them How to build and run a Docker image How to update the Docker image How to set up peristence with Docker How to set up container to container communication Following along: Content has been hosted @ https://boris-badrov.github.io/techtonic22-docker/ Otherwise go to the commands directory to get the commands being run Set up: Clone this repo if you haven't already got it from the provided USB's: git clone https://github.com/Boris-Badrov/techtonic22-docker.git Make sure Docker has been installed correctly docker version docker run hello-world Note Should receive input to indicate Docker is working correctly. Warning If you receive 'Permission Denied' on the 'pull' command then you'll need to prefix it with 'sudo'.","title":"Techtonic-22 Docker"},{"location":"#techtonic-22-docker","text":"","title":"Techtonic-22 Docker"},{"location":"#after-going-through-this-workshop-you-should-understand","text":"What a container and image is The differences between them How to build and run a Docker image How to update the Docker image How to set up peristence with Docker How to set up container to container communication","title":"After going through this workshop you should understand:"},{"location":"#following-along","text":"","title":"Following along:"},{"location":"#content-has-been-hosted-httpsboris-badrovgithubiotechtonic22-docker","text":"","title":"Content has been hosted @ https://boris-badrov.github.io/techtonic22-docker/"},{"location":"#otherwise-go-to-the-commands-directory-to-get-the-commands-being-run","text":"","title":"Otherwise go to the commands directory to get the commands being run"},{"location":"#set-up","text":"","title":"Set up:"},{"location":"#clone-this-repo-if-you-havent-already-got-it-from-the-provided-usbs","text":"git clone https://github.com/Boris-Badrov/techtonic22-docker.git","title":"Clone this repo if you haven't already got it from the provided USB's:"},{"location":"#make-sure-docker-has-been-installed-correctly","text":"docker version docker run hello-world Note Should receive input to indicate Docker is working correctly. Warning If you receive 'Permission Denied' on the 'pull' command then you'll need to prefix it with 'sudo'.","title":"Make sure Docker has been installed correctly"},{"location":"1.01-what-is-docker/","text":"What is Docker? A software platform for building applications based on containers Why though? Portable Made an app and want to share it with your friend? Different versions of a dependency? Ensures predictability / consistency Composability Can have multiple containers talking to each other - say front end + back end + database Easy to swap out containers Isolation at the process level with its own file system Broke something? Only affects the container itself Only has what it needs to run","title":"What is Docker?"},{"location":"1.01-what-is-docker/#what-is-docker","text":"A software platform for building applications based on containers","title":"What is Docker?"},{"location":"1.01-what-is-docker/#why-though","text":"","title":"Why though?"},{"location":"1.01-what-is-docker/#portable","text":"Made an app and want to share it with your friend? Different versions of a dependency? Ensures predictability / consistency","title":"Portable"},{"location":"1.01-what-is-docker/#composability","text":"Can have multiple containers talking to each other - say front end + back end + database Easy to swap out containers","title":"Composability"},{"location":"1.01-what-is-docker/#isolation-at-the-process-level-with-its-own-file-system","text":"Broke something? Only affects the container itself Only has what it needs to run","title":"Isolation at the process level with its own file system"},{"location":"1.02-images-containers/","text":"Images Read only template that contains instructions on how to create the container. The template is called a Dockerfile. Usually based upon other images. You can create your own images or use an image created by someone else / published in a registry Registry being something like Docker hub, GCP, AWS, Azure etc Dockerfile Example: FROM node:12.18.4-alpine # Install Alpine (version of Linux) with Node V12.18.4 WORKDIR /usr/src/app # Create directory COPY package*.json ./ # Copy files over COPY ./src ./src # Copy files over RUN npm install && npm run build # Install dependencies and build CMD npm run start # Run the app Containers: The running instance of an image which is the result of running the image via Docker. Immutable Once created from an image with any configuration options, it can\u2019t be updated Stateless When we delete a container, it is gone forever We can create, start, stop or delete a container using the Docker CLI. Images are recipes, containers are cakes What's inside a container? whoami docker run -it busybox whoami ls exit docker ps -a See that it looks like a Linux O/S","title":"Images & Containers"},{"location":"1.02-images-containers/#images","text":"Read only template that contains instructions on how to create the container. The template is called a Dockerfile. Usually based upon other images. You can create your own images or use an image created by someone else / published in a registry Registry being something like Docker hub, GCP, AWS, Azure etc","title":"Images"},{"location":"1.02-images-containers/#dockerfile-example","text":"FROM node:12.18.4-alpine # Install Alpine (version of Linux) with Node V12.18.4 WORKDIR /usr/src/app # Create directory COPY package*.json ./ # Copy files over COPY ./src ./src # Copy files over RUN npm install && npm run build # Install dependencies and build CMD npm run start # Run the app","title":"Dockerfile Example:"},{"location":"1.02-images-containers/#containers","text":"The running instance of an image which is the result of running the image via Docker. Immutable Once created from an image with any configuration options, it can\u2019t be updated Stateless When we delete a container, it is gone forever We can create, start, stop or delete a container using the Docker CLI.","title":"Containers:"},{"location":"1.02-images-containers/#images-are-recipes-containers-are-cakes","text":"","title":"Images are recipes, containers are cakes"},{"location":"1.02-images-containers/#whats-inside-a-container","text":"whoami docker run -it busybox whoami ls exit docker ps -a","title":"What's inside a container?"},{"location":"1.02-images-containers/#see-that-it-looks-like-a-linux-os","text":"","title":"See that it looks like a Linux O/S"},{"location":"1.03-vms/","text":"Rewind the clock, what was before containers? Virtual machines Why did virtual machines lose the battle? They each use their own operating system which is a heavy overhead + heavy start up / shut down costs. Portability issues between different host operating system due to hypervisors (creates VM\u2019s). VM\u2019s can be gigabytes in size vs Docker being in the megabytes.","title":"Virtual Machines"},{"location":"1.03-vms/#rewind-the-clock-what-was-before-containers-virtual-machines","text":"","title":"Rewind the clock, what was before containers? Virtual machines"},{"location":"1.03-vms/#why-did-virtual-machines-lose-the-battle","text":"They each use their own operating system which is a heavy overhead + heavy start up / shut down costs. Portability issues between different host operating system due to hypervisors (creates VM\u2019s). VM\u2019s can be gigabytes in size vs Docker being in the megabytes.","title":"Why did virtual machines lose the battle?"},{"location":"1.04-persistence/","text":"How does persistence work in Docker? First lets demonstrate how containers are stateless: docker run -it busybox echo 'some text' > file.txt' cat file.txt exit docker run -it busybox cat file.txt Docker Volumes Native to Docker Managed by the CLI Can be shared between containers docker volume create files docker volume inspect files docker run -it -v files:/test busybox cd test echo 'some text' > file.txt cat file.txt exit docker run -it -v files:/test busybox cd test cat file.txt","title":"Persistence"},{"location":"1.04-persistence/#how-does-persistence-work-in-docker","text":"","title":"How does persistence work in Docker?"},{"location":"1.04-persistence/#first-lets-demonstrate-how-containers-are-stateless","text":"docker run -it busybox echo 'some text' > file.txt' cat file.txt exit docker run -it busybox cat file.txt","title":"First lets demonstrate how containers are stateless:"},{"location":"1.04-persistence/#_1","text":"","title":""},{"location":"1.04-persistence/#docker-volumes","text":"Native to Docker Managed by the CLI Can be shared between containers docker volume create files docker volume inspect files docker run -it -v files:/test busybox cd test echo 'some text' > file.txt cat file.txt exit docker run -it -v files:/test busybox cd test cat file.txt","title":"Docker Volumes"},{"location":"1.05-clone/","text":"git clone https://github.com/Boris-Badrov/techtonic22-docker.git cd techtonic22-docker/app","title":"Clone"},{"location":"1.06-build/","text":"Lets look at our Dockerfile Go to the Dockerfile inside the app directory Lets look at our current images docker image ls Can see our image is not there so we need to build it first: docker build -t techtonic . -t tags the image for future reference / human readability. . means search for the Dockerfile in the current directory Lets run it docker run -dp 3000:3000 techtonic d means detached mode so we can still use the terminal p is port as we need to map between the port (internal to the container) to port on our machine. Without it you won't be able to access the app. Ports? Lets look at the status of the new container: docker ps Logs We can see the logs of an app like so: docker ps # Look under NAMES to get container name docker logs ${containerName} Finally lets go to our site! Go to http://localhost:3000/","title":"Build"},{"location":"1.06-build/#lets-look-at-our-dockerfile","text":"Go to the Dockerfile inside the app directory","title":"Lets look at our Dockerfile"},{"location":"1.06-build/#lets-look-at-our-current-images","text":"docker image ls","title":"Lets look at our current images"},{"location":"1.06-build/#can-see-our-image-is-not-there-so-we-need-to-build-it-first","text":"docker build -t techtonic . -t tags the image for future reference / human readability. . means search for the Dockerfile in the current directory","title":"Can see our image is not there so we need to build it first:"},{"location":"1.06-build/#lets-run-it","text":"docker run -dp 3000:3000 techtonic d means detached mode so we can still use the terminal p is port as we need to map between the port (internal to the container) to port on our machine. Without it you won't be able to access the app.","title":"Lets run it"},{"location":"1.06-build/#ports","text":"","title":"Ports?"},{"location":"1.06-build/#_1","text":"","title":""},{"location":"1.06-build/#lets-look-at-the-status-of-the-new-container","text":"docker ps","title":"Lets look at the status of the new container:"},{"location":"1.06-build/#logs","text":"We can see the logs of an app like so: docker ps # Look under NAMES to get container name docker logs ${containerName}","title":"Logs"},{"location":"1.06-build/#finally-lets-go-to-our-site-go-to-httplocalhost3000","text":"","title":"Finally lets go to our site! Go to http://localhost:3000/"},{"location":"1.07-change-code/","text":"Go to app/src/static/js/app.js and update line 56 with the below content: <p className=\"text-center\">You have no todo items yet! Add one above!</p> Lets start the updated container now docker run -dp 3000:3000 techtonic docker ps","title":"Change Code"},{"location":"1.07-change-code/#go-to-appsrcstaticjsappjs-and-update-line-56-with-the-below-content","text":"<p className=\"text-center\">You have no todo items yet! Add one above!</p>","title":"Go to app/src/static/js/app.js and update line 56 with the below content:"},{"location":"1.07-change-code/#lets-start-the-updated-container-now","text":"docker run -dp 3000:3000 techtonic docker ps","title":"Lets start the updated container now"},{"location":"1.08-stop-container/","text":"docker ps docker stop ${containerName} docker rm ${containerName} There is a short hand option to forcefully stop the container: docker rm -f ${containerName} Lets try running it again: docker run -dp 3000:3000 techtonic And to http://localhost:3000/","title":"Stop Container"},{"location":"1.08-stop-container/#there-is-a-short-hand-option-to-forcefully-stop-the-container","text":"docker rm -f ${containerName}","title":"There is a short hand option to forcefully stop the container:"},{"location":"1.08-stop-container/#lets-try-running-it-again","text":"docker run -dp 3000:3000 techtonic","title":"Lets try running it again:"},{"location":"1.08-stop-container/#and-to-httplocalhost3000","text":"","title":"And to http://localhost:3000/"},{"location":"1.09-build-again/","text":"We need to rebuild First stop the current container docker ps docker rm -f ${containerName} docker build -t techtonic . docker run -dp 3000:3000 techtonic One more time - http://localhost:3000/","title":"Build Again"},{"location":"1.09-build-again/#we-need-to-rebuild","text":"","title":"We need to rebuild"},{"location":"1.09-build-again/#first-stop-the-current-container","text":"docker ps docker rm -f ${containerName} docker build -t techtonic . docker run -dp 3000:3000 techtonic","title":"First stop the current container"},{"location":"1.09-build-again/#one-more-time-httplocalhost3000","text":"","title":"One more time - http://localhost:3000/"},{"location":"1.10-multi-container/","text":"Multi container applications Lets add a database to our application. Where should we run the database? Same container? Problems with same container, multiple processes: Multiple processes in same container requires extra code to manage it. Scaling up / down, starting & closing. What happens if one process crashes out? What happens if only one process changes but other doesn\u2019t? Means we have to redeploy the entire application. Your scaling will differ depending on process. Usually you\u2019d have different scaling on a front end compared to a back end. Database container Mac docker run -d \\ -v todo-mysql-data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=secret \\ -e MYSQL_DATABASE=todos \\ mysql:5.7 docker ps docker exec -it ${containerName} mysql -u root -p Mac M1 docker run -d \\ --platform \"linux/amd64\" \\ -v todo-mysql-data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=secret \\ -e MYSQL_DATABASE=todos \\ mysql:5.7 Windows docker run -d ` --network todo-app --network-alias mysql ` -v todo-mysql-data:/var/lib/mysql ` -e MYSQL_ROOT_PASSWORD=secret ` -e MYSQL_DATABASE=todos ` mysql:5.7 Lets jump into the DB Note Keeping in mind the password is secret as we set in the MYSQL_ROOT_PASSWORD environment variable SHOW DATABASES; exit docker rm -f ${containerName}","title":"Multi Container"},{"location":"1.10-multi-container/#multi-container-applications","text":"Lets add a database to our application. Where should we run the database? Same container? Problems with same container, multiple processes: Multiple processes in same container requires extra code to manage it. Scaling up / down, starting & closing. What happens if one process crashes out? What happens if only one process changes but other doesn\u2019t? Means we have to redeploy the entire application. Your scaling will differ depending on process. Usually you\u2019d have different scaling on a front end compared to a back end.","title":"Multi container applications"},{"location":"1.10-multi-container/#database-container","text":"","title":"Database container"},{"location":"1.10-multi-container/#mac","text":"docker run -d \\ -v todo-mysql-data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=secret \\ -e MYSQL_DATABASE=todos \\ mysql:5.7 docker ps docker exec -it ${containerName} mysql -u root -p","title":"Mac"},{"location":"1.10-multi-container/#mac-m1","text":"docker run -d \\ --platform \"linux/amd64\" \\ -v todo-mysql-data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=secret \\ -e MYSQL_DATABASE=todos \\ mysql:5.7","title":"Mac M1"},{"location":"1.10-multi-container/#windows","text":"docker run -d ` --network todo-app --network-alias mysql ` -v todo-mysql-data:/var/lib/mysql ` -e MYSQL_ROOT_PASSWORD=secret ` -e MYSQL_DATABASE=todos ` mysql:5.7","title":"Windows"},{"location":"1.10-multi-container/#lets-jump-into-the-db","text":"Note Keeping in mind the password is secret as we set in the MYSQL_ROOT_PASSWORD environment variable SHOW DATABASES; exit docker rm -f ${containerName}","title":"Lets jump into the DB"},{"location":"1.11-container-2-container/","text":"Container 2 Container Networking One rule: If two containers are on the same network then they can talk to each other. If they aren\u2019t, they can\u2019t. Docker allows us to create networks to allow separate containers to talk to each other via service discovery. No need to use IP addresses, a container name is all you need! The Docker CLI does allow us to create networks and set up containers within them but its somewhat manual and there is a much better tool included with Docker to do the job. Docker Compose Don't worry its installed by default The recommended approach to setting up multiple containers. Let's take a look at the docker-compose.yml file under the app directory docker-compose up --build -d --builds the image for us We don't always want to build the image, if we haven't made any code changes then we can skip building -d detached mode again so we can still use the terminal To stop your containers docker-compose down Logs docker-compose logs","title":"Container 2 Container"},{"location":"1.11-container-2-container/#container-2-container-networking","text":"One rule: If two containers are on the same network then they can talk to each other. If they aren\u2019t, they can\u2019t. Docker allows us to create networks to allow separate containers to talk to each other via service discovery. No need to use IP addresses, a container name is all you need! The Docker CLI does allow us to create networks and set up containers within them but its somewhat manual and there is a much better tool included with Docker to do the job.","title":"Container 2 Container Networking"},{"location":"1.11-container-2-container/#docker-compose","text":"","title":"Docker Compose"},{"location":"1.11-container-2-container/#dont-worry-its-installed-by-default","text":"","title":"Don't worry its installed by default"},{"location":"1.11-container-2-container/#the-recommended-approach-to-setting-up-multiple-containers","text":"","title":"The recommended approach to setting up multiple containers."},{"location":"1.11-container-2-container/#lets-take-a-look-at-the-docker-composeyml-file-under-the-app-directory","text":"docker-compose up --build -d --builds the image for us We don't always want to build the image, if we haven't made any code changes then we can skip building -d detached mode again so we can still use the terminal","title":"Let's take a look at the docker-compose.yml file under the app directory"},{"location":"1.11-container-2-container/#to-stop-your-containers","text":"docker-compose down","title":"To stop your containers"},{"location":"1.11-container-2-container/#logs","text":"docker-compose logs","title":"Logs"},{"location":"1.12-local-dev/","text":"Hot reloading within Docker Before the world of Docker, you probably wrote some code and executed your build directly. See the changes just about instantly. Compared to Docker, it was probably a lot faster. There is a way of directly editing your code within your container so you don\u2019t have to constantly rebuild. Docker mounts Is actually another form of persisting data within Docker. Allows us to choose where to mount our data. docker run -dp 3000:3000 \\ -w /app -v \"$(pwd):/app\" \\ node:12-alpine \\ sh -c \"yarn install && yarn run dev\" Lets break this down -w /app # Sets the current directory that the command will run from. -v \"${pwd}:/app\" # Bind mount to the current directory from the host in the container into the `/app` directory pwd is a Linux command that prints the current directory node:12-alpine # Image to use sh -c \"yarn install && yarn run dev\" # Start a shell using `sh` then install dependencies & run the dev script. # We are using a Node library called nodemon to accomplish the hot reloading. Lets check the logs docker ps docker logs {containerName} -f Once we see Listening on port 3000 then we are good to go - hit control + c Lets reverse our changes so go to src/static/js/app.js and update line 56 with the below content or do your own change <p className=\"text-center\">No todo items yet...</p> Note Refresh localhost if you have it open already and you should see the changes. You might get a temporary error, just refresh again. You'll still need to build the image for future use The image isn't getting rebuilt each time. So if you restart the container without rebuilding the image, you'll lose your changes","title":"(Bonus Round) Hot reloading within Docker"},{"location":"1.12-local-dev/#hot-reloading-within-docker","text":"Before the world of Docker, you probably wrote some code and executed your build directly. See the changes just about instantly. Compared to Docker, it was probably a lot faster. There is a way of directly editing your code within your container so you don\u2019t have to constantly rebuild.","title":"Hot reloading within Docker"},{"location":"1.12-local-dev/#docker-mounts","text":"Is actually another form of persisting data within Docker. Allows us to choose where to mount our data. docker run -dp 3000:3000 \\ -w /app -v \"$(pwd):/app\" \\ node:12-alpine \\ sh -c \"yarn install && yarn run dev\"","title":"Docker mounts"},{"location":"1.12-local-dev/#lets-break-this-down","text":"-w /app # Sets the current directory that the command will run from. -v \"${pwd}:/app\" # Bind mount to the current directory from the host in the container into the `/app` directory pwd is a Linux command that prints the current directory node:12-alpine # Image to use sh -c \"yarn install && yarn run dev\" # Start a shell using `sh` then install dependencies & run the dev script. # We are using a Node library called nodemon to accomplish the hot reloading.","title":"Lets break this down"},{"location":"1.12-local-dev/#lets-check-the-logs","text":"docker ps docker logs {containerName} -f Once we see Listening on port 3000 then we are good to go - hit control + c","title":"Lets check the logs"},{"location":"1.12-local-dev/#lets-reverse-our-changes-so-go-to-srcstaticjsappjs-and-update-line-56-with-the-below-content-or-do-your-own-change","text":"<p className=\"text-center\">No todo items yet...</p> Note Refresh localhost if you have it open already and you should see the changes. You might get a temporary error, just refresh again.","title":"Lets reverse our changes so go to src/static/js/app.js and update line 56 with the below content or do your own change"},{"location":"1.12-local-dev/#youll-still-need-to-build-the-image-for-future-use","text":"The image isn't getting rebuilt each time. So if you restart the container without rebuilding the image, you'll lose your changes","title":"You'll still need to build the image for future use"},{"location":"1.13-clean-up/","text":"Clean up Can skip if you want to play with the code later on etc. We are using Docker in the later workshops so at least stop any containers running. If you have Docker installed from before, be careful with these commands. Docker compose will clean up after running: docker-compose down Stop & remove any containers: docker ps -a docker rm -f ${someContainer} To delete any stopped containers: docker container prune Delete any images docker image ls docker rmi ${imageName} docker image prune Delete any volumes docker volume ls docker volme rm ${volumeName}","title":"Clean up"},{"location":"1.13-clean-up/#clean-up","text":"Can skip if you want to play with the code later on etc. We are using Docker in the later workshops so at least stop any containers running. If you have Docker installed from before, be careful with these commands. Docker compose will clean up after running: docker-compose down Stop & remove any containers: docker ps -a docker rm -f ${someContainer} To delete any stopped containers: docker container prune Delete any images docker image ls docker rmi ${imageName} docker image prune Delete any volumes docker volume ls docker volme rm ${volumeName}","title":"Clean up"},{"location":"1.14-recap/","text":"What did we learn again? Why Docker? Containers vs images and the differences between them How to build and update an image How to set up container 2 container communications","title":"Recap"},{"location":"1.14-recap/#what-did-we-learn-again","text":"","title":"What did we learn again?"},{"location":"1.14-recap/#why-docker","text":"","title":"Why Docker?"},{"location":"1.14-recap/#containers-vs-images-and-the-differences-between-them","text":"","title":"Containers vs images and the differences between them"},{"location":"1.14-recap/#how-to-build-and-update-an-image","text":"","title":"How to build and update an image"},{"location":"1.14-recap/#how-to-set-up-container-2-container-communications","text":"","title":"How to set up container 2 container communications"}]}